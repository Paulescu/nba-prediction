{"obj": {"type": "AssignString", "path": ["sys", "name"], "value": "Untitled"}, "version": 1}
{"obj": {"type": "AssignString", "path": ["sys", "description"], "value": ""}, "version": 2}
{"obj": {"type": "AssignString", "path": ["sys", "hostname"], "value": "DESKTOP-0BID4CS"}, "version": 3}
{"obj": {"type": "AssignBool", "path": ["sys", "failed"], "value": false}, "version": 4}
{"obj": {"type": "ClearStringLog", "path": ["monitoring", "stdout"]}, "version": 5}
{"obj": {"type": "ClearStringLog", "path": ["monitoring", "stderr"]}, "version": 6}
{"obj": {"type": "UploadFileSet", "path": ["source_code", "files"], "file_globs": ["C:\\Users\\Chris\\Desktop\\DataScienceProjects\\nba_game_predictor\\07a_xgb_model_test.ipynb"], "reset": "False"}, "version": 7}
{"obj": {"type": "ConfigFloatSeries", "path": ["monitoring", "cpu"], "min": 0.0, "max": 100.0, "unit": "%"}, "version": 8}
{"obj": {"type": "ClearFloatLog", "path": ["monitoring", "cpu"]}, "version": 9}
{"obj": {"type": "ConfigFloatSeries", "path": ["monitoring", "memory"], "min": 0.0, "max": 31.79674530029297, "unit": "GB"}, "version": 10}
{"obj": {"type": "ClearFloatLog", "path": ["monitoring", "memory"]}, "version": 11}
{"obj": {"type": "ConfigFloatSeries", "path": ["monitoring", "gpu"], "min": 0.0, "max": 100.0, "unit": "%"}, "version": 12}
{"obj": {"type": "ClearFloatLog", "path": ["monitoring", "gpu"]}, "version": 13}
{"obj": {"type": "ConfigFloatSeries", "path": ["monitoring", "gpu_memory"], "min": 0.0, "max": 12.0, "unit": "GB"}, "version": 14}
{"obj": {"type": "ClearFloatLog", "path": ["monitoring", "gpu_memory"]}, "version": 15}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stdout"], "values": [{"value": "Remember to stop your run once you\u2019ve finished logging your metadata (https://docs.neptune.ai/api-reference/run#.stop). It will be stopped automatically only when the notebook kernel/interactive console is terminated.\n", "step": null, "ts": 1666473212.5242848}]}, "version": 16}
{"obj": {"type": "LogFloats", "path": ["monitoring", "cpu"], "values": [{"value": 3.5, "step": null, "ts": 1666473212.522286}]}, "version": 17}
{"obj": {"type": "LogFloats", "path": ["monitoring", "memory"], "values": [{"value": 6.685646057128906, "step": null, "ts": 1666473212.522286}]}, "version": 18}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu"], "values": [{"value": 15.0, "step": null, "ts": 1666473212.522286}]}, "version": 19}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu_memory"], "values": [{"value": 0.7755622863769531, "step": null, "ts": 1666473212.522286}]}, "version": 20}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "HOME_TEAM_ID", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_TEAM_ID", "step": null, "ts": 1666473213.1002812}, {"value": "SEASON", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_home", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_home", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_home", "step": null, "ts": 1666473213.1002812}, {"value": "FG3_PCT_home", "step": null, "ts": 1666473213.1002812}, {"value": "AST_home", "step": null, "ts": 1666473213.1002812}, {"value": "REB_home", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_away", "step": null, "ts": 1666473213.1002812}]}, "version": 21}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "FG_PCT_away", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_away", "step": null, "ts": 1666473213.1002812}, {"value": "FG3_PCT_away", "step": null, "ts": 1666473213.1002812}, {"value": "AST_away", "step": null, "ts": 1666473213.1002812}, {"value": "REB_away", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_TEAM_WINS", "step": null, "ts": 1666473213.1002812}, {"value": "PLAYOFF", "step": null, "ts": 1666473213.1002812}, {"value": "CONFERENCE_x", "step": null, "ts": 1666473213.1002812}, {"value": "G_x", "step": null, "ts": 1666473213.1002812}, {"value": "W_x", "step": null, "ts": 1666473213.1002812}]}, "version": 22}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "L_x", "step": null, "ts": 1666473213.1002812}, {"value": "W_PCT_x", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_W_x", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_L_x", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_W_PCT_x", "step": null, "ts": 1666473213.1002812}, {"value": "ROAD_W_x", "step": null, "ts": 1666473213.1002812}, {"value": "ROAD_L_x", "step": null, "ts": 1666473213.1002812}, {"value": "ROAD_W_PCT_x", "step": null, "ts": 1666473213.1002812}, {"value": "CONFERENCE_y", "step": null, "ts": 1666473213.1002812}, {"value": "G_y", "step": null, "ts": 1666473213.1002812}]}, "version": 23}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "W_y", "step": null, "ts": 1666473213.1002812}, {"value": "L_y", "step": null, "ts": 1666473213.1002812}, {"value": "W_PCT_y", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_W_y", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_L_y", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_W_PCT_y", "step": null, "ts": 1666473213.1002812}, {"value": "ROAD_W_y", "step": null, "ts": 1666473213.1002812}, {"value": "ROAD_L_y", "step": null, "ts": 1666473213.1002812}, {"value": "ROAD_W_PCT_y", "step": null, "ts": 1666473213.1002812}, {"value": "MONTH", "step": null, "ts": 1666473213.1002812}]}, "version": 24}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "HOME_WINPCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_WINPCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_WINPCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_PTS_AVG_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_PTS_AVG_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_PTS_AVG_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FG_PCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FG_PCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FG_PCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FT_PCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}]}, "version": 25}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "HOME_FT_PCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FT_PCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FG3_PCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FG3_PCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_FG3_PCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_AST_AVG_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_AST_AVG_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_AST_AVG_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_REB_AVG_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_REB_AVG_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}]}, "version": 26}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "HOME_REB_AVG_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_TEAM_WIN_STREAK", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_WINPCT_LAST_3_AWAY", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_WINPCT_LAST_5_AWAY", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_WINPCT_LAST_7_AWAY", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_PTS_AVG_LAST_3_AWAY", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_PTS_AVG_LAST_5_AWAY", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_PTS_AVG_LAST_7_AWAY", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FG_PCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FG_PCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}]}, "version": 27}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "VISITOR_FG_PCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FT_PCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FT_PCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FT_PCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FG3_PCT_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FG3_PCT_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_FG3_PCT_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_AST_AVG_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_AST_AVG_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_AST_AVG_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}]}, "version": 28}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "VISITOR_REB_AVG_LAST_3_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_REB_AVG_LAST_5_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_REB_AVG_LAST_7_HOME", "step": null, "ts": 1666473213.1002812}, {"value": "VISITOR_TEAM_WIN_STREAK", "step": null, "ts": 1666473213.1002812}, {"value": "MATCHUP_WINS_x", "step": null, "ts": 1666473213.1002812}, {"value": "MATCHUP_COUNT_x", "step": null, "ts": 1666473213.1002812}, {"value": "MATCHUP_WINPCT_x", "step": null, "ts": 1666473213.1002812}, {"value": "MATCHUP_WIN_STREAK_x", "step": null, "ts": 1666473213.1002812}, {"value": "WIN_STREAK_x", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_AWAY_STREAK_x", "step": null, "ts": 1666473213.1002812}]}, "version": 29}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "WINPCT_LAST_3_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_5_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_7_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_10_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_3_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_5_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_7_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_10_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_3_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_5_ALL_x", "step": null, "ts": 1666473213.1002812}]}, "version": 30}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "FG_PCT_LAST_7_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_10_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_3_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_5_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_7_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_10_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_3_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_5_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_7_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_10_ALL_x", "step": null, "ts": 1666473213.1002812}]}, "version": 31}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "REB_AVG_LAST_3_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_5_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_7_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_10_ALL_x", "step": null, "ts": 1666473213.1002812}, {"value": "WIN_STREAK_y", "step": null, "ts": 1666473213.1002812}, {"value": "HOME_AWAY_STREAK_y", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_3_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_5_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_7_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "WINPCT_LAST_10_ALL_y", "step": null, "ts": 1666473213.1002812}]}, "version": 32}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "PTS_AVG_LAST_3_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_5_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_7_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "PTS_AVG_LAST_10_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_3_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_5_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_7_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FG_PCT_LAST_10_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_3_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_5_ALL_y", "step": null, "ts": 1666473213.1002812}]}, "version": 33}
{"obj": {"type": "LogStrings", "path": ["model", "features"], "values": [{"value": "FT_PCT_LAST_7_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "FT_PCT_LAST_10_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_3_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_5_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_7_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "AST_AVG_LAST_10_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_3_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_5_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_7_ALL_y", "step": null, "ts": 1666473213.1002812}, {"value": "REB_AVG_LAST_10_ALL_y", "step": null, "ts": 1666473213.1002812}]}, "version": 34}
{"obj": {"type": "AssignInt", "path": ["model", "parameters", "optuna_folds"], "value": 3}, "version": 35}
{"obj": {"type": "AssignInt", "path": ["model", "parameters", "optuna_trials"], "value": 15}, "version": 36}
{"obj": {"type": "AssignInt", "path": ["model", "parameters", "k_folds"], "value": 5}, "version": 37}
{"obj": {"type": "AssignInt", "path": ["model", "parameters", "seed"], "value": 13}, "version": 38}
{"obj": {"type": "AssignInt", "path": ["model", "parameters", "num_boost_round"], "value": 700}, "version": 39}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1690693}]}, "version": 40}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1700695}]}, "version": 41}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1700695}]}, "version": 42}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1700695}]}, "version": 43}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1710694}]}, "version": 44}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1710694}]}, "version": 45}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1710694}]}, "version": 46}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1710694}]}, "version": 47}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1720693}]}, "version": 48}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1720693}]}, "version": 49}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1720693}]}, "version": 50}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1720693}]}, "version": 51}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1720693}]}, "version": 52}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1730695}]}, "version": 53}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1730695}]}, "version": 54}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1730695}]}, "version": 55}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1730695}]}, "version": 56}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1740694}]}, "version": 57}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1740694}]}, "version": 58}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1740694}]}, "version": 59}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1740694}]}, "version": 60}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1740694}]}, "version": 61}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1750693}]}, "version": 62}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1750693}]}, "version": 63}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1750693}]}, "version": 64}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1750693}]}, "version": 65}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1750693}]}, "version": 66}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1760693}]}, "version": 67}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1760693}]}, "version": 68}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1760693}]}, "version": 69}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1760693}]}, "version": 70}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1760693}]}, "version": 71}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1770697}]}, "version": 72}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1770697}]}, "version": 73}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1770697}]}, "version": 74}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1770697}]}, "version": 75}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1780696}]}, "version": 76}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1780696}]}, "version": 77}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1780696}]}, "version": 78}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stderr"], "values": [{"value": "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n", "step": null, "ts": 1666473213.1780696}]}, "version": 79}
{"obj": {"type": "LogFloats", "path": ["monitoring", "cpu"], "values": [{"value": 4.3, "step": null, "ts": 1666473222.5303342}]}, "version": 80}
{"obj": {"type": "LogFloats", "path": ["monitoring", "memory"], "values": [{"value": 6.826404571533203, "step": null, "ts": 1666473222.5303342}]}, "version": 81}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu_memory"], "values": [{"value": 0.7759284973144531, "step": null, "ts": 1666473222.5303342}]}, "version": 82}
{"obj": {"type": "LogFloats", "path": ["monitoring", "cpu"], "values": [{"value": 2.9, "step": null, "ts": 1666473232.5425704}]}, "version": 83}
{"obj": {"type": "LogFloats", "path": ["monitoring", "memory"], "values": [{"value": 6.8822174072265625, "step": null, "ts": 1666473232.5425704}]}, "version": 84}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu"], "values": [{"value": 18.0, "step": null, "ts": 1666473232.5425704}]}, "version": 85}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu_memory"], "values": [{"value": 0.7762947082519531, "step": null, "ts": 1666473232.5425704}]}, "version": 86}
{"obj": {"type": "LogFloats", "path": ["monitoring", "cpu"], "values": [{"value": 2.4, "step": null, "ts": 1666473242.5628622}]}, "version": 87}
{"obj": {"type": "LogFloats", "path": ["monitoring", "memory"], "values": [{"value": 6.874057769775391, "step": null, "ts": 1666473242.5628622}]}, "version": 88}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu"], "values": [{"value": 9.0, "step": null, "ts": 1666473242.5628622}]}, "version": 89}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu_memory"], "values": [{"value": 0.7914924621582031, "step": null, "ts": 1666473242.5628622}]}, "version": 90}
{"obj": {"type": "LogFloats", "path": ["monitoring", "cpu"], "values": [{"value": 2.1, "step": null, "ts": 1666473252.578531}]}, "version": 91}
{"obj": {"type": "LogFloats", "path": ["monitoring", "memory"], "values": [{"value": 6.872615814208984, "step": null, "ts": 1666473252.578531}]}, "version": 92}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu"], "values": [{"value": 3.0, "step": null, "ts": 1666473252.578531}]}, "version": 93}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu_memory"], "values": [{"value": 0.7759284973144531, "step": null, "ts": 1666473252.578531}]}, "version": 94}
{"obj": {"type": "LogFloats", "path": ["monitoring", "cpu"], "values": [{"value": 1.5, "step": null, "ts": 1666473262.603194}]}, "version": 95}
{"obj": {"type": "LogFloats", "path": ["monitoring", "memory"], "values": [{"value": 6.8456268310546875, "step": null, "ts": 1666473262.603194}]}, "version": 96}
{"obj": {"type": "LogFloats", "path": ["monitoring", "gpu_memory"], "values": [{"value": 0.7759284973144531, "step": null, "ts": 1666473262.603194}]}, "version": 97}
{"obj": {"type": "LogStrings", "path": ["monitoring", "stdout"], "values": [{"value": "Shutting down background jobs, please wait a moment...\n", "step": null, "ts": 1666473266.7748256}]}, "version": 98}
